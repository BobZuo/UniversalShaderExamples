Shader "Universal Render Pipeline/Custom/VertexAnimation"
{
    Properties
    {
        [Header(Surface)]
        [MainColor] _BaseColor("Base Color", Color) = (1, 1, 1,1)
        [MainTexture] _BaseMap("Base Map", 2D) = "white" {}

        [Header(VertAnim)]
        _NoiseStrength("_NoiseStrength", Range(-4,4)) = 1
    }
    
    SURFACESHADER
        // -------------------------------------
        // Material variables. They need to be declared in UnityPerMaterial
        // to be able to be cached by SRP Batcher
        CBUFFER_START(UnityPerMaterial)
        float4 _BaseMap_ST;
        half4 _BaseColor;
        float _NoiseStrength;
        CBUFFER_END
    
        // -------------------------------------
        // Textures are declared in global scope
        TEXTURE2D(_BaseMap); SAMPLER(sampler_BaseMap);

        void VertexModificationFunction(Attributes IN)
        {
            // vertex modification adapted from NiloCat:
            // https://github.com/ColinLeung-NiloCat/UnityURP-SurfaceShaderSolution/blob/master/Assets/NiloCat/NiloURPSurfaceShader/ExampleSurfaceShaders/NiloURPSurfaceShader_Example.shader
            IN.positionOS += sin(_Time.y * dot(float3(1,1,1), IN.positionOS) * 10) * _NoiseStrength * 0.0125; //random sin() vertex anim
        }
    
        void SurfaceFunction(Varyings IN, out CustomSurfaceData surfaceData)
        {
            surfaceData = (CustomSurfaceData)0;
            float2 uv = TRANSFORM_TEX(IN.uv, _BaseMap);
            half3 baseColor = SAMPLE_TEXTURE2D(_BaseMap, sampler_BaseMap, uv) * _BaseColor;

            // diffuse color is black for metals and baseColor for dieletrics
            surfaceData.diffuse = baseColor.rgb;
            surfaceData.normalWS = normalize(IN.normalWS);
            surfaceData.alpha = 1.0;
        }
    ENDSURFACESHADER
}